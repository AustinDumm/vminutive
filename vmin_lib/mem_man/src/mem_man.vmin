(
    ; Heap and Stack memory manager
    ; Contains a memory manager for a 1 MiB heap with manual alloc and
    ; free functions. Also contains the sta_man implementation for stack
    ; memory management with interoperability between mem and sta.
    ;
    ; mem_man_alloc(bytes_to_alloc) allocates the #bytes returning a
    ;   pointer value to the address started the allocated block or 0
    ;   if the allocation could not be completed.
    ;
    ; mem_man_free(addr_of_block) frees the block at addr_of_block for
    ;   reallocation by a future call to mem_man_alloc.
    ;


    (DEF-CONST mem_man_null 0)
    (DEF-CONST _mem_man_init_size 1048576)

    (DEF-LABEL _mem_man_is_initialized_flag)
    (LIT64 0)
    (DEF-LABEL _mem_man_heap_start)
    (CONST64 mem_man_null)
    (DEF-LABEL _mem_man_heap_end)
    (CONST64 mem_man_null)
    (DEF-LABEL _mem_man_heap_free_ptr)
    (CONST64 mem_man_null)

    (DEF-LABEL _mem_man_init)                   ; _mem_man_init
                                                ; @ret - 0 if failed, otherwise non-0
    push-addr (LABEL32 _mem_man_is_initialized_flag)
    push (LIT64 1)                              ;
    store8 (LIT8 0)                             ;
                                                ;
    push (LABEL64 instr_end)                    ; *mem_man_heap_free_ptr = instr-end + (instr-end % 8)
    push-addr (LABEL32 _mem_man_align)          ;
    call                                        ;
    push-addr (LABEL32 _mem_man_heap_start)     ;
    duplicate                                   ;
    store8 (LIT8 0)                             ;
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ; 
    duplicate                                   ;
    store8 (LIT8 0)                             ;
                                                ;
    push (CONST64 _mem_man_init_size)           ;
    add-i                                       ;
    duplicate                                   ;
    push-addr (LABEL32 _mem_man_heap_end)       ;
    store8 (LIT8 0)                             ;
    push-addr (LABEL32 sta_man_set_limit)       ;
    call                                        ; 
    push-addr (LABEL32 _mem_man_can_init)       ;
    jump-nez-i                                  ;
    pop                                         ;
    push (LIT64 0)                              ;
    jump                                        ; return
    

    (DEF-LABEL _mem_man_align)                  ; TODO: MOVE THIS OUT OF THE INIT FN
    ;(DEF-CONST _mem_man_align_mask 18446744073709551608)
    (DEF-CONST _mem_man_align_mask -8)          ;
    duplicate                                   ; 
    push (CONST64 _mem_man_align_mask)          ;
    bitwise-and                                 ;
    swap                                        ; stack -> x -> (x - x%8)
    push (LIT64 8)                              ;
    modulus                                     ;
    push-addr (LABEL32 _mem_man_align_no_shift) ;
    jump-eqz-i                                  ;
                                                ;
    push (LIT64 8)                              ;
    add-i                                       ;
                                                ;
    (DEF-LABEL _mem_man_align_no_shift)         ;
    jump                                        ; return (x - x%8) + (x%8==0) ? 0 : 8


    (DEF-LABEL _mem_man_can_init)               ;
    push (CONST64 mem_man_null)                 ;
    push (CONST64 mem_man_null)                 ;
    push (CONST64 _mem_man_init_size)           ;
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ; 
    load8 (LIT8 0)                              ;
                                                ;
    push-addr (LABEL32 _mem_man_init_block)     ;
    call                                        ; 
                                                ;   -> *mem_man_heap_free_ptr, heap_size, mem_man_null, mem_man_null
    jump                                        ; 

    
    (DEF-LABEL _mem_man_is_init)                ; @ret 0 if not initialized, otherwise non-zero
    push-addr (LABEL32 _mem_man_is_initialized_flag)
    load8 (LIT8 0)                              ;
    jump                                        ; return


    (DEF-LABEL _mem_man_cond_init)              ;
    push-addr (LABEL32 _mem_man_is_init)        ; 
    call                                        ;
                                                ;
    push-addr (LABEL32 _mem_man_already_init)   ; 
    jump-nez-i                                  ;
    push-addr (LABEL32 _mem_man_init)           ;
    call                                        ;
    pop                                         ;
    jump                                        ; return
                                                ;
    (DEF-LABEL _mem_man_already_init)           ;
    jump                                        ; return

 
    (DEF-LABEL _mem_man_init_block)             ; stack -> block_addr -> block_size -> next_block -> prev_block
    (DEF-CONST mem_man_init_block_block_addr 0) ; @ret - 0 if failure, otherwise non-zero
    (DEF-CONST mem_man_init_block_block_size 8)
    (DEF-CONST mem_man_init_block_next_block 16)
    (DEF-CONST mem_man_init_block_prev_block 24)
    (DEF-CONST mem_man_block_header_footer_size 16)
    (DEF-CONST mem_man_min_block_size 24)       ;
    (DEF-CONST mem_man_init_block_mask 4294967290)

    push (LIT64 32)                             ;
    push-addr (LABEL32 sta_man_push_frame)      ;
    call                                        ;
    pop-to-addr                                 ;
                                                ;
    duplicate-addr                              ;
    store8 (CONST8 mem_man_init_block_block_addr)
    duplicate-addr                              ;
    store8 (CONST8 mem_man_init_block_block_size)
    duplicate-addr                              ;
    store8 (CONST8 mem_man_init_block_next_block)
    duplicate-addr                              ;
    store8 (CONST8 mem_man_init_block_prev_block)
                                                
    duplicate-addr                              ;
    load8 (CONST8 mem_man_init_block_block_size); 
    push (CONST64 mem_man_min_block_size)       ;
    subtract-i                                  ;
    push-addr (LABEL32 mem_man_init_block_can_init)
    jump-gez-i                                  ;
    pop-addr                                    ;
    push (LIT64 0)                              ;
    jump                                        ; return FAIL
                                                ;
    (DEF-LABEL mem_man_init_block_can_init)     ; 
    duplicate-addr                              ; block_addr = block_addr & mem_map_init_block_mask
    load8 (CONST8 mem_man_init_block_block_addr);
    push (CONST64 mem_man_init_block_mask)      ;
    bitwise-and                                 ;
    duplicate-addr                              ;
    store8 (CONST8 mem_man_init_block_block_addr)
                                                ;
    duplicate-addr                              ; 
    load8 (CONST8 mem_man_init_block_block_size);
    duplicate                                   ;
    duplicate-addr                              ; *mem_man_init_block_block_addr =
    load8 (CONST8 mem_man_init_block_block_addr);       mem_man_init_block_block_size
    pop-to-addr                                 ;
    store8 (LIT8 0)                             ;
                                                ; 
    duplicate-addr                              ; (*mem_man_init_block_block_addr)[
    load8 (CONST8 mem_man_init_block_block_addr);       (*mem_man_init_block_block_size - 8)..
    duplicate-addr                              ;           (*mem_man_init_block_block_size) 
    load8 (CONST8 mem_man_init_block_block_size);       ] = mem_man_init_block_block_size
    push (LIT64 8)                              ;
    subtract-i                                  ;
    add-i                                       ;
    pop-to-addr                                 ;
    store8 (LIT8 0)                             ; 
                                                ;
    duplicate-addr                              ; 
    load8 (CONST8 mem_man_init_block_next_block);
    duplicate-addr                              ; (*mem_man_init_block_block_addr)[8..12] =
    load8 (CONST8 mem_man_init_block_block_addr);       mem_man_init_block_next_block[0..4]
    push (LIT64 8)                              ;
    add-i                                       ;
    pop-to-addr                                 ;
    store4 (LIT8 0)                             ;
                                                ;
    duplicate-addr                              ;
    load8 (CONST8 mem_man_init_block_prev_block);
    duplicate-addr                              ; (*mem_man_init_block_block_addr)[12..16] =
    load8 (CONST8 mem_man_init_block_block_addr);       mem_man_init_block_prev_block[0..4]
    push (LIT64 12)                             ;
    add-i                                       ;
    pop-to-addr                                 ;
    store4 (LIT8 0)                             ;
                                                ;
    pop-addr                                    ;
    push (LIT64 1)                              ; 
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ; return


    (DEF-LABEL _mem_man_alloc_block)            ; stack -> block_addr -> block_size
                                                ;
    pop-to-addr                                 ;
                                                ;
    duplicate-addr                              ;
    duplicate                                   ;
    push (LIT64 1)                              ;
    add-i                                       ;
    store8 (LIT8 0)                             ;
                                                ;
    duplicate                                   ;
    pop-to-stack                                ;
    add-i                                       ;
    push (LIT64 8)                              ;
    subtract-i                                  ;
    pop-to-addr                                 ;
    push (LIT64 1)                              ;
    add-i                                       ;
    store8 (LIT8 0)                             ;
                                                ;
    jump                                        ; return

    
    (DEF-LABEL mem_man_alloc)                   ; stack -> bytes_to_reserve
                                                ; @ret 0 if no allocation space available
                                                ;     -1 if unrecoverable error encountered
                                                ;      <addr> of allocated block of size bytes_to_reserve
    (DEF-CONST _mem_man_alloc_reserve_bytes 0)  ;
    (DEF-CONST _mem_man_alloc_block_addr 8)     ;
    (DEF-CONST _mem_man_next_free_addr 16)      ;
    (DEF-CONST _mem_man_prev_free_addr 24)      ;
    (DEF-CONST _mem_man_remaining_bytes 32)     ;
    (DEF-CONST _mem_man_new_free_start 40)      ;
    (DEF-CONST _mem_man_this_block_size 48)     ;
                                                ;
    (DEF-CONST _mem_man_stack_frame_size 56)    ;
                                                ;
    push-addr (LABEL32 _mem_man_cond_init)      ;
    call                                        ;
                                                ; 
    push (CONST64 _mem_man_stack_frame_size)    ; call sta_man_push_frame(size=_mem_man_stack_frame_size)
    push-addr (LABEL32 sta_man_push_frame)      ;
    call                                        ; 
    pop-to-addr                                 ;
                                                ;
    push-addr (LABEL32 _mem_man_align)          ; _mem_man_alloc_reserve_bytes = bytes_to_reserve + bytes_to_reserve % 8
    call                                        ;
    duplicate-addr                              ; 
    store8 (CONST8 _mem_man_alloc_reserve_bytes);
                                                ;
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ;
    load8 (LIT8 0)                              ;
    push-addr (LABEL32 _mem_man_alloc_has_space);
    jump-nez-i                                  ;
    push (LIT64 0)                              ;
    pop-addr                                    ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ; return ERROR - no space
                                                ;
    (DEF-LABEL _mem_man_alloc_has_space)        ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_alloc_reserve_bytes) ;
                                                ; stack -> _alloc_reserve_bytes
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ;
    load8 (LIT8 0)                              ; stack -> _alloc_reserve_bytes -> first_block_addr
    swap                                        ;
    push-addr (LABEL32 _mem_man_find_free_block); let _mem_man_alloc_block_addr = 
    call                                        ;      call _mem_man_find_free_block(_mem_man_alloc_reserve_bytes)
    duplicate-addr                              ; 
    duplicate
    store8 (CONST8 _mem_man_alloc_block_addr)   ;
                                                ; stack -> _mem_man_alloc_block_addr
    duplicate                                   ; if _mem_man_alloc_block_addr == -1
    push-addr (LABEL32 _mem_man_alloc_no_err)   ;
    jump-gez-i                                  ;
    pop-addr                                    ;       return -1
    push (LIT64 -1)                             ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ;
                                                ;
    (DEF-LABEL _mem_man_alloc_no_err)           ; 
    duplicate                                   ; else if _mem_man_alloc_block_addr == 0
    push-addr (LABEL32 _mem_man_alloc_found_blk);
    jump-gtz-i                                  ;
    pop-addr                                    ;       return 0
    push (LIT64 0)                              ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ;
                                                ; 
    (DEF-LABEL _mem_man_alloc_found_blk)        ; stack -> _mem_man_alloc_block_addr
    duplicate                                   ; let _mem_man_next_free_addr = block_to_use[8..12]
    push (LIT64 8)                              ;
    add-i                                       ;
    pop-to-addr                                 ;
    load4 (LIT8 0)                              ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_next_free_addr)     ;
                                                ;
    push (LIT64 12)                             ; let _mem_man_prev_free_addr = block_to_use[12..16]
    add-i                                       ;
    pop-to-addr                                 ;
    load4 (LIT8 0)                              ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_prev_free_addr)     ;
                                                ; stack ->
                                                ; 
    duplicate-addr                              ; let _this_block_size = 
    load8 (CONST8 _mem_man_alloc_reserve_bytes) ;       _alloc_reserve_bytes + mem_man_block_header_footer_size
    push (CONST64 mem_man_block_header_footer_size)
    add-i                                       ;
    duplicate                                   ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_this_block_size)    ;
                                                ; 
    duplicate                                   ; let _new_free_start = _alloc_block_addr + _this_block_size
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_alloc_block_addr)    ;
    add-i                                       ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_new_free_start)     ;
                                                ; stack -> _this_block_size
    duplicate-addr                              ; let _remaining_bytes = *_alloc_block_addr - _this_block_size
    load8 (CONST8 _mem_man_alloc_block_addr)    ;
    pop-to-addr                                 ;
    load8 (LIT8 0)                              ;
    swap                                        ;
    subtract-i                                  ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_remaining_bytes)    ;
                                                ; 
    duplicate-addr                              ; result = call _mem_man_init_block(
    load8 (CONST8 _mem_man_prev_free_addr)      ;                   _new_free_start,
    duplicate-addr                              ;                   _remaining_bytes,
    load8 (CONST8 _mem_man_next_free_addr)      ;                   _next_free_addr,
    duplicate-addr                              ;                   _prev_free_addr
    load8 (CONST8 _mem_man_remaining_bytes)     ;               )
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_new_free_start)      ;
    push-addr (LABEL32 _mem_man_init_block)     ;
    call                                        ; 
                                                ;
    push-addr (LABEL32 _mem_man_can_split)      ; if result = 0
    jump-nez-i                                  ;
                                                ;  alloc whole block, no man_can_split
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_next_free_addr)      ;   if _next_free_addr != null
    push-addr (LABEL32 _mem_man_done_next)      ;
    jump-eqz-i                                  ;
                                                ;
    duplicate-addr                              ;       _next_free_addr[12..16] = _prev_free_addr
    load8 (CONST8 _mem_man_prev_free_addr)      ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_next_free_addr)      ;
    push (LIT64 12)                             ;
    add-i                                       ;
    pop-to-addr                                 ;
    store4 (LIT8 0)                             ;
                                                ;
    (DEF-LABEL _mem_man_done_next)              ;
                                                ;
    duplicate-addr                              ;   if _prev_free_addr != null
    load8 (CONST8 _mem_man_prev_free_addr)      ;
    push-addr (LABEL32 _mem_no_split_no_prev)   ;
    jump-eqz-i                                  ;
                                                ;
    duplicate-addr                              ;       _prev_free_addr[8..12] = _next_free_addr
    load8 (CONST8 _mem_man_next_free_addr)      ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_prev_free_addr)      ;
    push (LIT64 8)                              ;
    add-i                                       ;
    pop-to-addr                                 ;
    store4 (LIT8 0)                             ;
    push-addr (LABEL32 _mem_man_no_split_done)  ;
    jump                                        ;
                                                ;
    (DEF-LABEL _mem_no_split_no_prev)           ;   else
    duplicate-addr                              ;       _mem_man_heap_free_ptr = _next_free_addr
    load8 (CONST8 _mem_man_next_free_addr)      ;
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ;
    store8 (LIT8 0)                             ;
                                                ;
    (DEF-LABEL _mem_man_no_split_done)          ;
    duplicate-addr                              ;   call _mem_man_alloc_block(_alloc_block_addr, *_alloc_block_addr)
    load8 (CONST8 _mem_man_alloc_block_addr)    ;
    pop-to-addr                                 ;
    load8 (LIT8 0)                              ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_alloc_block_addr)    ;
    push-addr (LABEL32 _mem_man_alloc_block)    ;
    call                                        ;
                                                ;
    push-addr (LABEL32 _mem_man_split_done)     ;
    jump                                        ;
                                                ;
    (DEF-LABEL _mem_man_can_split)              ; stack ->
                                                ; else
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_new_free_start)      ;
                                                ;
    duplicate-addr                              ; 
    load8 (CONST8 _mem_man_next_free_addr)      ;
    push-addr (LABEL32 _mem_man_split_no_next)  ;
    jump-eqz-i                                  ;
                                                ;
    duplicate                                   ;       _next_free_addr[12..16] = result
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_next_free_addr)      ;
    push (LIT64 12)                             ;
    add-i                                       ;
    pop-to-addr                                 ;
    store8 (LIT8 0)                             ;
                                                ; 
    (DEF-LABEL _mem_man_split_no_next)          ; stack ->
    duplicate-addr                              ;   if _prev_free_addr != null
    load8 (CONST8 _mem_man_prev_free_addr)      ;
    push-addr (LABEL32 _mem_man_split_no_prev)  ;
    jump-eqz-i                                  ;
                                                ;
    duplicate-addr                              ;       _prev_free_addr[8..12] = result
    load8 (CONST8 _mem_man_prev_free_addr)      ;
    push (LIT64 8)                              ;
    add-i                                       ;
    pop-to-addr                                 ;
    store8 (LIT8 0)                             ;
    push-addr (LABEL32 _mem_man_split_prev_done);
    jump                                        ;
                                                ; 
    (DEF-LABEL _mem_man_split_no_prev)          ;   else
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ;       _mem_man_heap_free_ptr = result
    store8 (LIT8 0)                             ;
                                                ;
    (DEF-LABEL _mem_man_split_prev_done)        ; 
    duplicate-addr                              ;   call _mem_man_alloc_block(_alloc_block_addr, _this_block_size)
    load8 (CONST8 _mem_man_this_block_size)     ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_alloc_block_addr)    ;
    push-addr (LABEL32 _mem_man_alloc_block)    ;
    call                                        ; 
                                                ;
    (DEF-LABEL _mem_man_split_done)             ;
    load8 (CONST8 _mem_man_alloc_block_addr)    ; push _alloc_block_addr + 8 // block size header space
    push (LIT64 8)                              ;
    add-i                                       ;
                                                ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ; return

    
    (DEF-LABEL _mem_man_find_free_block)        ; stack -> bytes_to_reserve -> first_test_block_addr
    (DEF-CONST _mem_man_is_used_mask 1)         ;
    (DEF-CONST _mem_man_find_reserve_bytes 0)   ; @ret - 0 if no block found, otherwise
    (DEF-CONST _mem_man_test_block_addr 8)      ;       -1 if ran into allocated block
                                                ;       addr of valid block if one found
    push (LIT64 16)                             ; 
    push-addr (LABEL32 sta_man_push_frame)      ;
    call                                        ; 
    pop-to-addr                                 ;
                                                ;
    duplicate-addr                              ; 
    store8 (CONST8 _mem_man_find_reserve_bytes) ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_test_block_addr)    ;
                                                ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_test_block_addr)     ;
    push-addr (LABEL32 _mem_man_find_loop)      ;
    jump-nez-i                                  ; 
    pop-addr                                    ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    push (LIT64 0)                              ;
    jump                                        ; return 0 (null)
                                                ;
    (DEF-LABEL _mem_man_find_loop)              ; 
    duplicate-addr                              ; Sanity check to make sure the block is unallocated
    load8 (CONST8 _mem_man_test_block_addr)     ;
    pop-to-addr                                 ;
    load8 (LIT8 0)                              ;
    duplicate                                   ;
    push (CONST64 _mem_man_is_used_mask)        ; 
    bitwise-and                                 ;
    push-addr (LABEL32 _mem_man_block_allocated);
    jump-nez-i                                  ;
                                                ; stack -> test_block_size
    duplicate-addr                              ; If the block size is greater than bytes to reserve, break
    push (CONST64 mem_man_block_header_footer_size) ; 
    subtract-i                                  ;
    load8 (CONST8 _mem_man_find_reserve_bytes)  ;
    subtract-i                                  ;
    push-addr (LABEL32 _mem_man_found_block)    ;
    jump-gez-i                                  ; stack ->
                                                ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_test_block_addr)     ;
    push (LIT64 8)                              ; Add "next_block" offset
    add-i                                       ;
    pop-to-addr                                 ;
    load4 (LIT8 0)                              ; stack -> *next_block
                                                ;
    duplicate                                   ;
    push-addr (LABEL32 _mem_man_no_block)       ;
    load8 (LIT8 0)                              ;
    jump-eqz-i                                  ;
                                                ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_test_block_addr)    ;
    push-addr (LABEL32 _mem_man_find_loop)      ;
    jump                                        ;
                                                ;
    (DEF-LABEL _mem_man_found_block)            ; 
    load8 (CONST8 _mem_man_test_block_addr)     ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ; return found_block_addr
                                                ;
    (DEF-LABEL _mem_man_no_block)               ;
    pop                                         ;
    pop-addr                                    ;
    push (LIT64 0)                              ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ; return 0 (null)
                                                ;
    (DEF-LABEL _mem_man_block_allocated)        ;
    pop-addr                                    ;
    push (LIT64 -1)                             ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ; return unrecoverable error -1
    

    (DEF-LABEL mem_man_free)                    ; stack -> ptr_to_block_mem
                                                ; @return 0 if error freeing, nonzero otherwise
    (DEF-CONST _mem_man_block_to_free_ptr 0)    ;
    (DEF-CONST _mem_man_freeing_block_size 8)   ;
                                                ;
    (DEF-CONST _mem_man_frame_size 16)          ;
                                                ;
    push-addr (LABEL32 _mem_man_cond_init)      ;
    call                                        ;
                                                ;
    push (CONST64 _mem_man_frame_size)          ;
    push-addr (LABEL32 sta_man_push_frame)      ;
    call                                        ;
    pop-to-addr                                 ;
                                                ;
    push (LIT64 8)                              ;
    subtract-i                                  ;
    duplicate-addr                              ;
    duplicate                                   ;
    store8 (CONST8 _mem_man_block_to_free_ptr)  ;
                                                ;
    pop-to-addr                                 ; let _block_size = ptr_to_block_mem[0..8]
    load8 (LIT8 0)                              ;
    duplicate                                   ;
    push (LIT64 1)                              ; if _block_size & 1 == 0
    bitwise-and                                 ;
    push-addr (LABEL32 _mem_man_no_double_free) ;
    jump-nez-i                                  ;
    pop                                         ;
    pop-addr                                    ;
    push (LIT64 0)                              ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ;   return 0 // Double free error
                                                ;
    (DEF-LABEL _mem_man_no_double_free)         ;
    push (LIT64 -2)                             ;
    bitwise-and                                 ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_freeing_block_size) ;
                                                ;
    duplicate-addr                              ; let (_mem_man_block_to_free_ptr, _block_size) = 
    load8 (CONST8 _mem_man_block_to_free_ptr)   ;       call merge_block(_mem_man_block_to_free_ptr)
    push-addr (LABEL32 _mem_man_handle_merges)  ;
    call                                        ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_block_to_free_ptr)  ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_freeing_block_size) ;
                                                ;
    push (LIT64 0)                              ;
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ;
    load8 (LIT8 0)                              ;
    duplicate-addr                              ; call _mem_man_init_block(
    load8 (CONST8 _mem_man_freeing_block_size)  ;           _block_to_free_ptr, 
    duplicate-addr                              ;           _block_size, 
    load8 (CONST8 _mem_man_block_to_free_ptr)   ;           _mem_man_heap_free_ptr,
    push-addr (LABEL32 _mem_man_init_block)     ;           null
    call                                        ;
                                                ;
    push-addr (LABEL32 _mem_man_free_block_no_err)
    jump-nez-i                                  ;
    push (LIT64 0)                              ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ; jump return block init err
                                                ;
    (DEF-LABEL _mem_man_free_block_no_err)      ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_block_to_free_ptr)   ;
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ; (*_mem_man_heap_free_ptr)[12..16] = _block_to_free_ptr
    load8 (LIT8 0)                              ;
    push (LIT64 12)                             ;
    add-i                                       ;
    pop-to-addr                                 ;
    store4 (LIT8 0)                             ;
                                                ;
    load8 (CONST8 _mem_man_block_to_free_ptr)   ;
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ; _mem_man_heap_free_ptr = _block_to_free_ptr
    store8 (LIT8 0)                             ;
                                                ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ; return

    (DEF-LABEL _mem_man_handle_merges)          ; @arg 0 center_block_addr
    (DEF-CONST _mem_man_merges_block_addr 0)    ; @ret 0 if error
    (DEF-CONST _mem_man_merges_block_size 8)    ;      stack -> merged_block_addr -> merged_block_size
    (DEF-CONST _mem_man_merges_left_addr 16)    ;
    (DEF-CONST _mem_man_merges_left_size 24)    ;
    (DEF-CONST _mem_man_merges_right_addr 32)   ;
    (DEF-CONST _mem_man_merges_right_size 40)   ;
                                                ;
    (DEF-CONST _mem_man_merges_frame_size 48)   ;
                                                ;
    push (CONST64 _mem_man_merges_frame_size)   ;
    push-addr (LABEL32 sta_man_push_frame)      ;
    call                                        ;
    pop-to-addr                                 ;
                                                ;
    duplicate                                   ;
    duplicate-addr                              ; let merged_block_addr = center_block_addr
    store8 (CONST8 _mem_man_merges_block_addr)  ;
    pop-to-addr                                 ;
    load8 (LIT8 0)                              ;
    push (LIT64 -2)                             ;
    bitwise-and                                 ;
    duplicate-addr                              ; let merged_block_size = center_block_addr[0..8]
    store8 (CONST8 _mem_man_merges_block_size)  ;
                                                ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_merges_block_addr)   ;
    push (LIT64 8)                              ;
    subtract-i                                  ;
    pop-to-addr                                 ;
    load8 (LIT8 0)                              ;
    duplicate                                   ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_merges_left_size)   ;
                                                ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_merges_block_addr)   ;
    swap                                        ;
    subtract-i                                  ;
    duplicate                                   ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_merges_left_addr)   ;
                                                ;
    push-addr (LABEL32 _mem_man_heap_start)     ;
    load8 (LIT8 0)                              ; if block isn't leftmost
    subtract-i                                  ;
    push-addr (LABEL32 _mem_man_merges_left_alloc)
    jump-ltz-i                                  ;
                                                ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_merges_left_size)    ;
    push (LIT64 1)                              ; if 1 & left_block_size == 0 // Free left block
    bitwise-and                                 ;
    push-addr (LABEL32 _mem_man_merges_left_alloc)
    jump-nez-i                                  ;
                                                ;
    duplicate-addr                              ;  merged_block_addr = merged_block_addr - left_block_size
    load8 (CONST8 _mem_man_merges_block_addr)   ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_merges_left_size)    ;
    subtract-i                                  ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_merges_block_addr)  ;
                                                ;
    duplicate-addr                              ;  call splice_out(merged_block_addr)
    load8 (CONST8 _mem_man_merges_block_addr)   ;
    push-addr (LABEL32 _mem_man_splice_out)     ;
    call                                        ;
                                                ;
    push-addr (LABEL32 _mem_man_merges_left_no_err)
    jump-nez-i                                  ;
    pop-addr                                    ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    push (LIT64 0)                              ;
    call                                        ; return ERROR
                                                ;
    (DEF-LABEL _mem_man_merges_left_no_err)     ;
    duplicate-addr                              ;  merged_block_size += left_block_size
    load8 (CONST8 _mem_man_merges_block_size)   ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_merges_left_size)    ;
    add-i                                       ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_merges_block_size)  ;
                                                ;
    (DEF-LABEL _mem_man_merges_left_alloc)      ;
                                                ;
    duplicate-addr                              ; let right_block_addr = merged_block_addr + merged_block_addr[0..8] 
    load8 (CONST8 _mem_man_merges_block_size)   ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_merges_block_addr)   ;
    add-i                                       ;
    duplicate-addr                              ;
    duplicate                                   ;
    store8 (CONST8 _mem_man_merges_right_addr)  ;
                                                ;
    pop-to-addr                                 ; let right_block_size = right_block_addr[0..8]
    load8 (LIT8 0)                              ;
    push (LIT64 -2)                             ;
    bitwise-and                                 ;
    duplicate-addr                              ;
    duplicate                                   ;
    store8 (CONST8 _mem_man_merges_right_size)  ;
                                                ;
    duplicate-addr                              ; if right_block_addr + right_block_size > heap_end, skip
    load8 (CONST8 _mem_man_merges_right_addr)   ;
    add-i                                       ;
    push-addr (LABEL32 _mem_man_heap_end)       ;
    load8 (LIT8 0)                              ;
    subtract-i                                  ;
    push-addr (LABEL32 _mem_man_merges_right_alloc)
    jump-gtz-i                                  ;
                                                ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_merges_right_addr)   ;
    pop-to-addr                                 ;
    load8 (LIT8 0)                              ;
    push (LIT64 1)                              ; if 1 & right_block_size == 0 // Free right block
    bitwise-and                                 ;
    push-addr (LABEL32 _mem_man_merges_right_alloc)
    jump-nez-i                                  ;
                                                ;
    duplicate-addr                              ;  call splice_out(right_block_addr)
    load8 (CONST8 _mem_man_merges_right_addr)   ;
    push-addr (LABEL32 _mem_man_splice_out)     ;
    call                                        ;
                                                ;
    push-addr (LABEL32 _mem_man_merges_right_no_err)
    jump-nez-i                                  ;
    pop-addr                                    ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    push (LIT64 0)                              ;
    call                                        ; return ERROR
                                                ;
    (DEF-LABEL _mem_man_merges_right_no_err)    ;
                                                ;
    duplicate-addr                              ;  merged_block_size += right_block_size
    load8 (CONST8 _mem_man_merges_block_size)   ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_merges_right_size)   ;
    add-i                                       ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_merges_block_size)  ;
                                                ;
    (DEF-LABEL _mem_man_merges_right_alloc)     ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_merges_block_size)   ;
    load8 (CONST8 _mem_man_merges_block_addr)   ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ;
    

    (DEF-LABEL _mem_man_splice_out)             ; @arg 0 block_addr
    (DEF-CONST _mem_man_splice_block_addr 0)    ; @ret 0 if error, otherwise nonzero
    (DEF-CONST _mem_man_splice_prev_addr 8)     ;
    (DEF-CONST _mem_man_splice_next_addr 16)    ;
                                                ;
    (DEF-CONST _mem_man_split_frame_size 24)    ;
                                                ;
    push (CONST64 _mem_man_split_frame_size)    ;
    push-addr (LABEL32 sta_man_push_frame)      ;
    call                                        ;
    pop-to-addr                                 ;
                                                ;
    duplicate                                   ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_splice_block_addr)  ; let _block_addr = block_addr
    duplicate                                   ;
    pop-to-addr                                 ;
    load4 (LIT8 8)                              ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_splice_next_addr)   ; let _next_addr = block_addr[8..12]
    pop-to-addr                                 ;
    load4 (LIT8 12)                             ;
    duplicate-addr                              ;
    store8 (CONST8 _mem_man_splice_prev_addr)   ; let _prev_addr = block_addr[12..16]
                                                ;
    duplicate-addr                              ; if _prev_addr == null
    load8 (CONST8 _mem_man_splice_prev_addr)    ;
    push-addr (LABEL32 _mem_man_splice_has_prev);
    jump-nez-i                                  ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_splice_next_addr)    ;
    push-addr (LABEL32 _mem_man_heap_free_ptr)  ;  _mem_man_heap_free_ptr = _next_addr
    store8 (LIT8 0)                             ;
    push-addr (LABEL32 _mem_man_splice_prev_done)
    jump                                        ;
                                                ;
    (DEF-LABEL _mem_man_splice_has_prev)        ; else
    duplicate-addr                              ;  _prev_addr[12..16] = _next_addr
    load8 (CONST8 _mem_man_splice_next_addr)    ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_splice_prev_addr)    ;
    push (LIT64 12)                             ;
    add-i                                       ;
    pop-to-addr                                 ;
    store4 (LIT8 0)                             ;
                                                ;
    (DEF-LABEL _mem_man_splice_prev_done)       ;
                                                ;
    duplicate-addr                              ; if _next_addr != null
    load8 (CONST8 _mem_man_splice_next_addr)    ;
    push-addr (LABEL32 _mem_man_splice_no_next) ;
    jump-eqz-i                                  ;
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_splice_prev_addr)    ;  _next_addr[12..16] = _prev_addr
    duplicate-addr                              ;
    load8 (CONST8 _mem_man_splice_next_addr)    ;
    pop-to-addr                                 ;
    store4 (LIT8 12)                            ;
                                                ;
    (DEF-LABEL _mem_man_splice_no_next)         ;
    push (LIT64 1)                              ; nonzero = success
    pop-addr                                    ;
    push-addr (LABEL32 sta_man_return_pop)      ;
    jump                                        ; return

    (INCLUDE "/Users/adumm/Dev/MessageExperiments/vmin_lib/mem_man/src/sta_man.vmin")
)